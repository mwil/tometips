var VERSION = '2017-03-11';

// http://stackoverflow.com/a/2548133/25507
if (typeof String.prototype.endsWith !== 'function') {
    String.prototype.endsWith = function(suffix) {
        return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
}

/**Parses query string-like parameters out of the end of the hash.
 * Based on http://stackoverflow.com/a/2880929/25507
 */
function parseHashQueryString() {
    var match,
        pl     = /\+/g,  // Regex for replacing addition symbol with a space
        search = /([^&=]+)=?([^&]*)/g,
        decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
        query  = window.location.hash.substring(1),
        url_params = {};

    if (query.indexOf('?') != -1) {
        query = query.substring(query.indexOf('?') + 1);

        while ((match = search.exec(query))) {
           url_params[decode(match[1])] = decode(match[2]);
        }
    }

    return url_params;
}

// REMOVED: getData moved to core/data-loader.js

// REMOVED: escapeHtml moved to core/utils.js

// REMOVED: locationHashNoQuery moved to core/utils.js

function currentQuery()
{
    var query = versions.asQuery();
    var mquery = masteries.asQuery();
    if (query) {
        if (mquery) query += '&' + mquery;
    } else {
        query = mquery;
    }
    return query ? '?' + query : '';
}

// MOVED: Navigation management moved to features/routing.js
function setActiveNav(active_nav_route) {
    if (typeof ROUTING !== 'undefined') {
        return ROUTING.setActiveNav(active_nav_route);
    }
}

// MOVED: Navigation updates moved to features/routing.js
function updateNav() {
    if (typeof ROUTING !== 'undefined') {
        return ROUTING.updateNav();
    }
}


// Removed old scrollToId function - using the updated one below

// MOVED: Mobile navigation moved to features/ui-management.js
function createMobileNavigation(contentNav) {
    if (typeof UI_MANAGEMENT !== 'undefined') {
        return UI_MANAGEMENT.createMobileNavigation(contentNav);
    }
    return contentNav || '';
}

// MOVED: Layout management moved to features/ui-management.js
function adjustSidebarLayout() {
    if (typeof UI_MANAGEMENT !== 'undefined') {
        return UI_MANAGEMENT.adjustSidebarLayout();
    }
}

// MOVED: Expand/collapse functionality moved to features/ui-management.js
function enableExpandCollapseAll() {
    if (typeof UI_MANAGEMENT !== 'undefined') {
        return UI_MANAGEMENT.enableExpandCollapseAll();
    }
}

// MOVED: Sidebar accordion behavior moved to features/ui-management.js
function enforceSidebarAccordion(targetNavId) {
    if (typeof UI_MANAGEMENT !== 'undefined') {
        return UI_MANAGEMENT.enforceSidebarAccordion(targetNavId);
    }
}

// MOVED: Collapsible management moved to features/ui-management.js
function showCollapsed(html_id, disable_transitions) {
    if (typeof UI_MANAGEMENT !== 'undefined') {
        return UI_MANAGEMENT.showCollapsed(html_id, disable_transitions);
    }
}

// MOVED: Collapsible accordion behavior moved to features/ui-management.js
function showCollapsedWithAccordion(html_id, disable_transitions) {
    if (typeof UI_MANAGEMENT !== 'undefined') {
        return UI_MANAGEMENT.showCollapsedWithAccordion(html_id, disable_transitions);
    }
}

// MOVED: Expanded IDs tracking moved to features/ui-management.js
function getExpandedIds() {
    if (typeof UI_MANAGEMENT !== 'undefined') {
        return UI_MANAGEMENT.getExpandedIds();
    }
    return [];
}

// MOVED: Expand IDs functionality moved to features/ui-management.js
function expandIds(id_list, disable_transitions) {
    if (typeof UI_MANAGEMENT !== 'undefined') {
        return UI_MANAGEMENT.expandIds(id_list, disable_transitions);
    }
}

// MOVED: Expanded state tracking moved to features/ui-management.js
// Compatibility alias for backward compatibility
var prev_expanded = null;

// MOVED: Update finished logic moved to features/ui-management.js
function updateFinished() {
    if (typeof UI_MANAGEMENT !== 'undefined') {
        return UI_MANAGEMENT.updateFinished();
    }
}

// Header is now always fixed - no sticky behavior needed

var options = {
    imgSize: 48
};

///Simplistic title-case function that capitalizes the beginning of every word.
function toTitleCase(s)
{
    var never_capitalize = {
        // Fix problems like "Berserker's"
        "s":true,
        // Prepositions and internal articles
        "of":true,
        "the":true
    };
    s = s.replace(/\b([a-z])([a-z]+)/g, function(match, p1, p2) { return never_capitalize[match] ? match : (p1.toUpperCase() + p2); });
    // Force the first word to be capitalized, even if it's "of" or "the"
    return s[0].toUpperCase() + s.slice(1);
}

// REMOVED: toHtmlId and toUnsafeHtmlId moved to core/utils.js

/**Given an object, return a new object that indexes the object's properties by
 * HTML ID.
 *
 * For example, if classes = { 'WARRIOR': { 'short_name': 'WARRIOR', ... }, ...},
 * then indexByHtmlId(classes, 'short_name') will return
 * { 'warrior': { 'short_name': 'WARRIOR', ... }, ...}
 */
function indexByHtmlId(obj, property) {
    return _.object(_.map(obj, function(elem) { return [ UTILS.toHtmlId(elem[property]), elem ]; }));
}

/**Marks up inline links to the ToME wiki */
// MOVED: Link markup moved to features/ui-management.js
function markupHintLinks() {
    if (typeof UI_MANAGEMENT !== 'undefined') {
        return UI_MANAGEMENT.markupHintLinks();
    }
}

// MOVED: Tooltip management moved to features/ui-management.js
function enableTalentTooltips() {
    if (typeof UI_MANAGEMENT !== 'undefined') {
        return UI_MANAGEMENT.enableTalentTooltips();
    }
}

Handlebars.registerHelper('tome_git_url', function() {
    return 'http://git.net-core.org/tome/t-engine4';
});

// Helper to detect DLC content based on source_code path
Handlebars.registerHelper('isDLC', function(source_code) {
    if (!source_code || !source_code[0]) return false;
    var path = source_code[0];
    var isDlc = path.indexOf('data-cults') !== -1 || 
                path.indexOf('data-orcs') !== -1 ||
                path.indexOf('data-ashes') !== -1 ||
                path.indexOf('data-ashes-urhrok') !== -1 ||
                path.indexOf('data-possessors') !== -1 ||
                // Generic check for any data-<something> pattern that's not data/
                (path.indexOf('data-') === 0 && path !== 'data/' && path !== 'data\\/' && path.indexOf('data/') !== 0 && path.indexOf('data\\/') !== 0);
    
    return isDlc;
});

///Iterates over properties, sorted. Based on http://stackoverflow.com/a/9058854/25507.
Handlebars.registerHelper('eachProperty', function(context, options) {
    var ret = "",
        keys = _.keys(context || {});
    keys.sort();
    for (var i = 0; i < keys.length; i++) {
        ret = ret + options.fn({key: keys[i], value: context[keys[i]]});
    }
    return ret;
});

/**Renders a partial, with additional arguments. Based on http://stackoverflow.com/a/14618035/25507
 *
 * Usage: Arguments are merged with the context for rendering only
 * (non destructive). Use `:token` syntax to replace parts of the
 * template path. Tokens are replace in order.
 *
 * USAGE: {{$ 'path.to.partial' context=newContext foo='bar' }}
 * USAGE: {{$ 'path.:1.:2' replaceOne replaceTwo foo='bar' }}
 */
Handlebars.registerHelper('$', function (partial) {
    var values, opts, done, value, context;
    if (!partial) {
        return '';
    }
    values = Array.prototype.slice.call(arguments, 1);
    opts = values.pop().hash;
    while (!done) {
        value = values.pop();
        if (value) {
            partial = partial.replace(/:[^\.]+/, value);
        } else {
            done = true;
        }
    }
    partial = Handlebars.partials[partial];
    if (!partial) {
        return '';
    }
    context = _.extend({}, opts.context || this, _.omit(opts, 'context', 'fn', 'inverse'));
    return new Handlebars.SafeString(partial(context));
});

Handlebars.registerHelper('choose', function(context, options) {
  return options.fn(context[Math.floor(Math.random() * context.length)]);
});

Handlebars.registerHelper('toTitleCase', function(context, options) {
    return toTitleCase(context);
});

Handlebars.registerHelper('toLowerCase', function(context, options) {
    return context.toLowerCase();
});

Handlebars.registerHelper('capitalize', function(context, options) {
    if (!context) return '';
    return context.charAt(0).toUpperCase() + context.slice(1);
});

Handlebars.registerHelper('itemImagePath', function(imagePath, size, options) {
    if (!imagePath) return '';
    size = size || 32;
    
    // Transform "object/artifact/acera.png" to "object/artifact/32/acera.png"
    // or "object/sword.png" to "object/32/sword.png"
    var parts = imagePath.split('/');
    if (parts.length >= 2) {
        // Insert size folder before filename
        var filename = parts.pop();
        parts.push(size.toString());
        parts.push(filename);
        return parts.join('/');
    }
    return imagePath;
});

Handlebars.registerHelper('toDecimal', function(context, places, options) {
   return context.toFixed(places || 2);
});

// ToME-specific functions that makes a ToME ID a valid and standard HTML ID
Handlebars.registerHelper('toHtmlId', toHtmlId);
Handlebars.registerHelper('toUnsafeHtmlId', toUnsafeHtmlId);

// ToME-specific function that tries to make a name or ID into a te4.org wiki page name
Handlebars.registerHelper('toWikiPage', function(context, options) {
   return toTitleCase(context).replace(' ', '_');
});

Handlebars.registerHelper('tag', function(context, options) {
    return DATA_LOADER.getData().tag;
});

Handlebars.registerHelper('currentQuery', function(context, options) {
    return currentQuery();
});

// REMOVED: Duplicate opt helper - consolidated into single implementation below (line 1348)

Handlebars.registerHelper('labelForChangeType', function(type) {
    var css_class = { "changed": "info", "added": "success", "removed": "danger" },
        text = { "changed": "Changed", "added": "New", "removed": "Removed" };
    return '<span class="label label-' + css_class[type] + '">' + text[type] + ':</span>';
});

/* Displays an entry in a stat block.
 * @param value
 *   the internal value to process
 * @display
 *   how to display the value
 * @mult
 *   If -1, invert the comparison.  If 0, don't prepend with '+'.
 * @compare
 *   if value is > compare, then a bonus; if < compare, a penalty
 */
function stat(desc, value, display, mult, compare) {
    var internal_value = value * (mult || 1),
        value_html;
    display = display || (value >= 0 ? '+' + value : value);
    compare = (compare || 0) * (mult || 1);
    if (internal_value == compare) {
        value_html = '<span class="stat-neutral">' + display + '</span>';
    } else if (internal_value > compare) {
        value_html = '<span class="stat-bonus">' + display + '</span>';
    } else {
        value_html = '<span class="stat-penalty">' + display + '</span>';
    }
    return new Handlebars.SafeString("<dt>" + desc + ":</dt><dd>" + value_html + "</dd>");
}

Handlebars.registerHelper('stat', function(desc, value) {
    value = value || 0;
    return stat(desc, value);
});

Handlebars.registerHelper('customStat', function(desc, value, mult, compare) {
    return stat(desc, value, value, mult, compare);
});

Handlebars.registerHelper('percentStat', function(desc, value, mult, compare) {
    var percent = value * 100;
    percent = (mult && percent > 0 ? '+' : '') + percent.toFixed(0) + '%';
    return stat(desc, value, percent, mult, compare);
});

Handlebars.registerHelper('statValue', function(value) {
    value = value || 0;
    var internal_value = value,
        display = value >= 0 ? '+' + value : value,
        compare = 0;
    
    if (internal_value == compare) {
        return new Handlebars.SafeString('<span class="stat-neutral">' + display + '</span>');
    } else if (internal_value > compare) {
        return new Handlebars.SafeString('<span class="stat-bonus">' + display + '</span>');
    } else {
        return new Handlebars.SafeString('<span class="stat-penalty">' + display + '</span>');
    }
});

Handlebars.registerHelper('textStat', function(desc, value) {
    return new Handlebars.SafeString('<dt>' + desc + ':</dt><dd><span class="stat-neutral">' + value + '</span></dd>');
});

Handlebars.registerHelper('negate', function(value) {
    return -value;
});

Handlebars.registerHelper('hasAdditionalStats', function(context) {
    return !!(context.size || 
             context.copy.global_speed_base ||
             context.copy.poison_immune ||
             context.copy.cut_immune ||
             context.copy.silence_immune ||
             context.copy.stun_immune ||
             context.copy.fear_immune ||
             context.copy.no_breath);
});


// MOVED: Search functionality moved to features/search.js
// Alias for backwards compatibility
var typeahead = SEARCH;

// MOVED: Version and mastery management moved to features/version-management.js
// Aliases for backwards compatibility
var versions = VERSION_MANAGEMENT.versions;
var masteries = VERSION_MANAGEMENT.masteries;

var routes,
    load_nav_data_handler,
    base_title = document.title;

function initializeRoutes() {
    routes = {

        // Default route - redirect to classes overview
        default_route: crossroads.addRoute(':?query:', function(query) {
            // Redirect to classes overview instead of showing news
            hasher.replaceHash('classes' + (query ? '?' + query : ''));
        }),

        // Updates for previous versions of the site.
        reroute1: crossroads.addRoute('changes/talents?ver=1.2.0dev', function() {
            hasher.replaceHash('changes/talents?ver=master');
        }),

        changes_talents: crossroads.addRoute('changes/talents:?query:', function(query) {
            routes.talents.matched.dispatch(query);

            $("#content-container").scrollTop(0);
            DATA_LOADER.loadDataIfNeeded('changes.talents', function() {
                document.title += ' - New in ' + DATA_LOADER.getData().majorVersion;
                $("#content").html(listChangesTalents(tome));

                enableTalentTooltips();
                updateFinished();
            });
        }),

        recent_changes_talents: crossroads.addRoute('recent-changes/talents:?query:', function(query) {
            // TODO: Remove duplication with changes_talents route
            routes.talents.matched.dispatch(query);

            $("#content-container").scrollTop(0);
            DATA_LOADER.loadDataIfNeeded('recent-changes.talents', function() {
                document.title += ' - New in ' + DATA_LOADER.getData().version;
                $("#content").html(listRecentChangesTalents(tome));

                enableTalentTooltips();
                updateFinished();
            });
        }),

        talents: crossroads.addRoute('talents:?query:', function(query) {
            versions.update(query);
            document.title = base_title + ' - Talents';
            setActiveNav("#talents");

            if (!$("#nav-talents").length) {
                DATA_LOADER.loadDataIfNeeded('', function() {
                    $("#side-nav").html(createMobileNavigation(navTalents(tome)));
                    load_nav_data_handler = loadNavTalents;
                    $("#content").html($("#news").html());
                });
            }
        }),

        talents_category: crossroads.addRoute("talents/{category}:?query:", function(category, query) {
            
            routes.talents.matched.dispatch(query);
            document.title += ' - ' + toTitleCase(category);

            $("#content-container").scrollTop(0);
            DATA_LOADER.loadDataIfNeeded('talents.' + category, function() {
                
                var this_nav = "#nav-" + category;
                showCollapsedWithAccordion(this_nav);

                fillNavTalents(tome, category);
                $("#content").html(listTalents(tome, category));
                UTILS.scrollToId();

                // Convert Bootstrap 3 attributes to Bootstrap 5 for talent panels
                if (typeof convertBootstrapAttributes === 'function') {
                    convertBootstrapAttributes();
                }
                

                var expandingAll = false;
                
                $(".expand-all").on('click', function() {
                    expandingAll = true;
                    setTimeout(function() { expandingAll = false; }, 1000);
                });
                
                var isScrolling = false;
                $(document).on('shown.bs.collapse', '.talent-details.collapse', function () {
                    
                    if (expandingAll || isScrolling) return;
                    
                    var $panel = $(this);
                    var $contentContainer = $("#content-container");
                    
                    // Use setTimeout to ensure panel is fully expanded
                    setTimeout(function() {
                        if (isScrolling) return;
                        isScrolling = true;
                        
                        var panelTop = $panel.offset().top;
                        var panelHeight = $panel.outerHeight();
                        var panelBottom = panelTop + panelHeight;
                        
                        var containerScrollTop = $contentContainer.scrollTop();
                        var containerTop = $contentContainer.offset().top;
                        var containerHeight = $contentContainer.height();
                        var containerBottom = containerTop + containerHeight;
                        
                        // Check if panel extends beyond visible area
                        if (panelBottom > containerBottom) {
                            var targetScroll = containerScrollTop + (panelBottom - containerBottom) + 20;
                            
                            $contentContainer.animate({
                                scrollTop: targetScroll
                            }, 300, function() {
                                isScrolling = false;
                            });
                        } else {
                            isScrolling = false;
                        }
                    }, 50);
                });

                enableTalentTooltips();

                fillTalentAvailability(tome, category);
                updateFinished();
            });
        }),

        talents_category_type: crossroads.addRoute("talents/{category}/{type}:?query:", function(category, type, query) {
            routes.talents_category.matched.dispatch(category, query);
        }),

        talents_category_type_id: crossroads.addRoute("talents/{category}/{type}/{talent_id}:?query:", function(category, type, talent_id, query) {
            // Load the category page - it will automatically call scrollToId() when done
            // The scrollToId() function will find the element with ID: talents/category/type/talent_id
            routes.talents_category.matched.dispatch(category, query);
        }),

        races: crossroads.addRoute('races:?query:', function(query) {
            versions.update(query);
            document.title += ' - Races';
            setActiveNav("#races");

            if (!$("#nav-races").length) {
                loadRacesIfNeeded(function() {
                    $("#side-nav").html(createMobileNavigation(navRaces(tome)));
                    load_nav_data_handler = false;
                    $("#content").html($("#news").html());
                });
            }
        }),

        races_race: crossroads.addRoute("races/{r}:?query:", function(r, query) {
            versions.update(query);

            loadRacesIfNeeded(function() {
                routes.races.matched.dispatch(query);

                var data = DATA_LOADER.getData();
                if (!data.races.races_by_id[r]) {
                    handleUnknownRace(tome, r);
                    return;
                }

                document.title += ' - ' + data.races.races_by_id[r].display_name;

                $("#content-container").scrollTop(0);

                var this_nav = "#nav-" + r;
                showCollapsedWithAccordion(this_nav);

                $("#content").html(listRaces(tome, r));
                
                fillRaceTalents(tome, r, function() {
                    // All race talent data has loaded, now scroll to the target
                    UTILS.scrollToId();
                });

                updateFinished();
            });
        }),

        races_race_subrace: crossroads.addRoute("races/{r}/{subrace}:?query:", function(r, subrace, query) {
            // For subrace routes, load the parent race page but skip the scroll-to-top behavior
            versions.update(query);

            loadRacesIfNeeded(function() {
                routes.races.matched.dispatch(query);

                var data = DATA_LOADER.getData();
                if (!data.races.races_by_id[r]) {
                    handleUnknownRace(tome, r);
                    return;
                }

                document.title += ' - ' + data.races.races_by_id[r].display_name;

                // Skip the scrollTop(0) for subrace navigation

                var this_nav = "#nav-" + r;
                showCollapsedWithAccordion(this_nav);

                $("#content").html(listRaces(tome, r));
                
                fillRaceTalents(tome, r, function() {
                    // All race talent data has loaded, now scroll to the target
                    UTILS.scrollToId();
                });

                updateFinished();
            });
        }),

        classes: crossroads.addRoute('classes:?query:', function(query) {
            versions.update(query);
            document.title += ' - Classes';
            setActiveNav("#classes");

            if (!$("#nav-classes").length) {
                loadClassesIfNeeded(function() {
                    $("#side-nav").html(createMobileNavigation(navClasses(tome)));
                    load_nav_data_handler = false;
                    $("#content").html($("#news").html());
                });
            }
        }),

        classes_class: crossroads.addRoute("classes/{cls}:?query:", function(cls, query) {
            versions.update(query);

            loadClassesIfNeeded(function() {
                routes.classes.matched.dispatch(query);
                document.title += ' - ' + DATA_LOADER.getData().classes.classes_by_id[cls].display_name;

                $("#content-container").scrollTop(0);

                var this_nav = "#nav-" + cls;
                showCollapsedWithAccordion(this_nav);

                $("#content").html(listClasses(tome, cls));
                
                fillClassTalents(tome, cls, function() {
                    // All class talent data has loaded, now scroll to the target
                    UTILS.scrollToId();
                });

                updateFinished();
            });
        }),

        classes_class_subclass: crossroads.addRoute("classes/{cls}/{subclass}:?query:", function(cls, subclass, query) {
            // For subclass routes, load the parent class page but skip the scroll-to-top behavior
            versions.update(query);

            loadClassesIfNeeded(function() {
                routes.classes.matched.dispatch(query);
                document.title += ' - ' + DATA_LOADER.getData().classes.classes_by_id[cls].display_name;

                // Skip the scrollTop(0) for subclass navigation
                
                var this_nav = "#nav-" + cls;
                showCollapsedWithAccordion(this_nav);

                $("#content").html(listClasses(tome, cls));
                
                fillClassTalents(tome, cls, function() {
                    // All class talent data has loaded, now scroll to the target
                    UTILS.scrollToId();
                });

                updateFinished();
            });
        }),

        items: crossroads.addRoute('items:?query:', function(query) {
            versions.update(query);
            document.title = base_title + ' - Items';
            setActiveNav("#items");

            if (!$("#nav-items").length) {
                loadItemsData().then(function() {
                    $("#side-nav").html(createMobileNavigation(navItems()));
                    load_nav_data_handler = false;
                    $("#content").html(listItems('all'));
                });
            }
        }),

        items_category: crossroads.addRoute("items/{category}:?query:", function(category, query) {
            routes.items.matched.dispatch(query);
            document.title += ' - ' + toTitleCase(category);

            $("#content-container").scrollTop(0);
            loadItemsData().then(function() {
                var this_nav = "#nav-" + category;
                showCollapsedWithAccordion(this_nav);

                $("#content").html(listItems(category));
                UTILS.scrollToId();
                updateFinished();
            });
        }),

        items_subcategory: crossroads.addRoute("items/{category}/{subcategory}:?query:", function(category, subcategory, query) {
            routes.items.matched.dispatch(query);
            document.title += ' - ' + toTitleCase(category) + ' - ' + toTitleCase(subcategory);

            $("#content-container").scrollTop(0);
            loadItemsData().then(function() {
                var this_nav = "#nav-" + category + "-" + subcategory;
                showCollapsedWithAccordion(this_nav);

                $("#content").html(listItems(category, subcategory));
                UTILS.scrollToId();
                updateFinished();
            });
        }),

        items_subgroup: crossroads.addRoute("items/{category}/{subcategory}/{subgroup}:?query:", function(category, subcategory, subgroup, query) {
            routes.items_subcategory.matched.dispatch(category, subcategory, query);
        }),

        items_item: crossroads.addRoute("items/{category}/{itemId}:?query:", function(category, itemId, query) {
            routes.items_category.matched.dispatch(category, query);
        })
    };

    function parseHash(new_hash, old_hash) {
        
        if (!versions.redirectMasterToDefault()) {
            crossroads.parse(new_hash);
        }
    }

    hasher.prependHash = '';
    hasher.initialized.add(parseHash);
    hasher.changed.add(parseHash);
    if (googletag && googletag.pubads) hasher.changed.add(function() { googletag.pubads().refresh([ad_slot]) });
    hasher.init();
}

// REMOVED: loadData moved to core/data-loader.js

/**Handler for expanding nav items. Takes a jQuery element that's being
 * expanded and does any on-demand loading of the data for that nav item.
 */
load_nav_data_handler = false;

// REMOVED: loadDataIfNeeded moved to core/data-loader.js

// MOVED: Image size settings moved to features/ui-management.js
var imgSizeSettings = {
    get size() {
        return (typeof UI_MANAGEMENT !== 'undefined' && UI_MANAGEMENT.imageSize) 
            ? UI_MANAGEMENT.imageSize.get() : 32;
    },
    set: function(size) {
        if (typeof UI_MANAGEMENT !== 'undefined' && UI_MANAGEMENT.imageSize) {
            UI_MANAGEMENT.imageSize.set(size);
        }
    },
    get: function() {
        if (typeof UI_MANAGEMENT !== 'undefined' && UI_MANAGEMENT.imageSize) {
            return UI_MANAGEMENT.imageSize.get();
        }
        return 32;
    },
    updateActiveMenuItem: function(size) {
        if (typeof UI_MANAGEMENT !== 'undefined' && UI_MANAGEMENT.imageSize) {
            return UI_MANAGEMENT.imageSize.updateActiveMenuItem(size);
        }
    },
    applyIconSizeClasses: function(size) {
        if (typeof UI_MANAGEMENT !== 'undefined' && UI_MANAGEMENT.imageSize) {
            return UI_MANAGEMENT.imageSize.applyIconSizeClasses(size);
        }
    }
};

// Consolidated Handlebars helper for accessing settings and global options
Handlebars.registerHelper('opt', function(option) {
    if (option === 'imgSize') {
        // Get the current menu setting
        var menuSize = imgSizeSettings.get();
        
        // Check if we're on the talents or items page vs classes page
        var currentHash = window.location.hash || '';
        var isTalentsPage = currentHash.includes('#talents');
        var isItemsPage = currentHash.includes('#items');
        
        if (isTalentsPage) {
            // Talents page mapping: Small=48, Medium=64, Large=96
            switch(menuSize) {
                case 32: return 48; // Small
                case 48: return 64; // Medium
                case 64: return 96; // Large
                default: return 64; // Default to medium
            }
        } else if (isItemsPage) {
            // Items page mapping: Small=32, Medium=64, Large=96
            switch(menuSize) {
                case 32: return 32; // Small
                case 48: return 64; // Medium
                case 64: return 96; // Large
                default: return 64; // Default to medium
            }
        } else {
            // Classes page mapping: Small=32, Medium=48, Large=64
            return menuSize;
        }
    }
    
    // Handle simple option access for backward compatibility
    if (typeof options !== 'undefined' && options[option]) {
        return options[option];
    }
    
    return '';
});

// MOVED: Talents page size handling moved to features/ui-management.js
function handleTalentsPageSizeChange(menuSize) {
    if (typeof UI_MANAGEMENT !== 'undefined' && UI_MANAGEMENT.imageSize) {
        return UI_MANAGEMENT.imageSize.handleTalentsPageSizeChange(menuSize);
    }
}

// MOVED: Items page size handling moved to features/ui-management.js
function handleItemsPageSizeChange(menuSize) {
    if (typeof UI_MANAGEMENT !== 'undefined' && UI_MANAGEMENT.imageSize) {
        return UI_MANAGEMENT.imageSize.handleItemsPageSizeChange(menuSize);
    }
}

// MOVED: Image size configuration moved to features/ui-management.js
function configureImgSize() {
    if (typeof UI_MANAGEMENT !== 'undefined') {
        return UI_MANAGEMENT.configureImgSize();
    }
}

// MOVED: Test function moved to features/ui-management.js
// Global function for testing from console
window.testSpacing = function(size) {
    size = size || 64;
    if (typeof UI_MANAGEMENT !== 'undefined' && UI_MANAGEMENT.imageSize) {
        UI_MANAGEMENT.imageSize.set(size);
        UI_MANAGEMENT.imageSize.applyIconSizeClasses(size);
    }
};

// REMOVED: Duplicate locationHashNoQuery moved to core/utils.js

// REMOVED: scrollToId function moved to core/utils.js

window.onerror = function(msg, url, line) {
    $("html").removeClass("wait");

    if ($("#content").html() === 'Loading...') {
        $("#content").html('');
    }

    $("#content").prepend(
        '<div class="alert alert-danger">' +
            'Internal error: ' + UTILS.escapeHtml(msg || '') +
            ' on ' + url + ' line ' + line +
            '<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>'  +
        '</div>'
    );
};

// REMOVED: Main initialization moved to core/app.js
// Keep this comment to prevent duplicate initialization
$(function() {
    // Legacy initialization code - will be moved in phases
    
    // Prevent duplicate initialization from app.js
    if (window.APP_INITIALIZED) return;
    window.APP_INITIALIZED = true;
    // See http://stackoverflow.com/a/10801889/25507
    $(document).ajaxStart(function() { $("html").addClass("wait"); });
    $(document).ajaxStop(function() { $("html").removeClass("wait"); });

    // Clicking on a ".clickable" element triggers the <a> within it.
    $("html").on("click", ".clickable", function(e) {
        // Skip expand-all/collapse-all buttons - they have their own handlers
        if ($(this).hasClass('expand-all') || $(this).hasClass('collapse-all')) {
            return true;
        }
        
        if (e.target.nodeName == 'A') {
            // If the user clicked on the link itself, then simply let
            // the browser handle it.
            return true;
        }

        $(this).find('a').click();
    });

    // Flag to prevent dropdown handling after navigation
    // Clean event handling for navigation
    $("#side-nav").off("click");
    $("#nav-items").off("click");
    
    // TALENTS NAVIGATION (#side-nav) - Restore original simple logic
    $("#side-nav").on("click", ".dropdown", function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        var $dropdown = $(this);
        var targetSelector = $dropdown.attr('data-target') || $dropdown.attr('data-bs-target');
        var $targetCollapse = $(targetSelector);
        var $parentLi = $dropdown.closest('li');
        var isCurrentlyCollapsed = $dropdown.hasClass('collapsed');
        
        // Simple toggle behavior for talents
        if (isCurrentlyCollapsed) {
            // Check if this is top-level (direct child of #side-nav)
            var isTopLevel = $parentLi.parent().attr('id') === 'side-nav';
            
            if (isTopLevel) {
                // Close all other top-level sections (accordion behavior)
                $parentLi.siblings().each(function() {
                    var $siblingCollapse = $(this).find('> .collapse');
                    var $siblingDropdown = $(this).find('> a > .dropdown');
                    if ($siblingCollapse.hasClass('show')) {
                        $siblingCollapse.collapse('hide');
                        $siblingDropdown.addClass('collapsed').attr('aria-expanded', 'false');
                    }
                });
                
                // Navigate when expanding top-level
                var $link = $dropdown.closest('a');
                var href = $link.attr('href');
                if (href) {
                    window.location.hash = href.substring(1);
                }
            }
            
            $targetCollapse.collapse('show');
        } else {
            $targetCollapse.collapse('hide');
        }
    });
    
    // ITEMS NAVIGATION - Use event delegation for dynamically loaded content
    
    // ITEMS NAVIGATION: Separate handlers for each type to prevent interference
    
    // LEVEL 1: Top-level accordion sections ONLY (not nested)
    $(document).on("click", "#nav-items > li > a", function(e) {
        var $link = $(this);
        var $parentLi = $link.closest('li');
        
        // Only handle if this is truly a direct child (not nested)
        if ($parentLi.parent().attr('id') !== 'nav-items') {
            return; // Skip if this is actually a nested element
        }
        
        var hasDropdown = $link.find('.dropdown').length > 0;
        
        if (hasDropdown) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            
            var $dropdown = $link.find('.dropdown');
            var targetSelector = $dropdown.attr('data-bs-target');
            var $targetCollapse = $(targetSelector);
            var isCurrentlyCollapsed = $dropdown.hasClass('collapsed');
            
            if (isCurrentlyCollapsed) {
                // Close all other top-level sections (accordion behavior)
                $parentLi.siblings().each(function() {
                    var $siblingCollapse = $(this).find('> .collapse');
                    if ($siblingCollapse.hasClass('show')) {
                        $siblingCollapse.collapse('hide');
                    }
                });
                
                // Navigate when expanding top-level
                var href = $link.attr('href');
                if (href) {
                    window.location.hash = href.substring(1);
                }
                
                // Open this section
                $targetCollapse.collapse('show');
            } else {
                $targetCollapse.collapse('hide');
            }
        }
    });
    
    // LEVEL 2+: Nested sections and leaf items (higher priority, runs first)
    $(document).on("click", "#nav-items .collapse a", function(e) {
        var $link = $(this);
        var hasDropdown = $link.find('.dropdown').length > 0;
        var hasNoDropdown = $link.find('.no-dropdown').length > 0;
        
        if (hasDropdown) {
            e.preventDefault(); // Prevent Bootstrap's automatic data-bs-toggle behavior
            e.stopPropagation(); // Prevent Level 1 handler
            e.stopImmediatePropagation(); // Prevent all other handlers
            
            // Handle collapse manually to avoid Bootstrap's automatic accordion behavior
            var $dropdown = $link.find('.dropdown');
            var targetSelector = $dropdown.attr('data-bs-target');
            var $targetCollapse = $(targetSelector);
            var isCurrentlyCollapsed = $dropdown.hasClass('collapsed');
            
            if (isCurrentlyCollapsed) {
                $targetCollapse.collapse('show');
            } else {
                $targetCollapse.collapse('hide');
            }
        } else if (hasNoDropdown) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            
            var href = $link.attr('href');
            if (href) {
                window.location.hash = href.substring(1);
            }
        }
    });
    
    // Removed debug catch-all handler to prevent event conflicts

    // Bootstrap collapse events to keep caret states synchronized
    $("#side-nav").on("shown.bs.collapse", ".collapse", function(e) {
        var $collapse = $(this);
        var targetId = $collapse.attr('id');
        var $dropdown = $("#side-nav").find('.dropdown[data-target="#' + targetId + '"], .dropdown[data-bs-target="#' + targetId + '"]');
        $dropdown.removeClass('collapsed').attr('aria-expanded', 'true');
        
        if (load_nav_data_handler) {
            load_nav_data_handler($collapse);
        }
    });
    
    $("#side-nav").on("hidden.bs.collapse", ".collapse", function(e) {
        var $collapse = $(this);
        var targetId = $collapse.attr('id');
        var $dropdown = $("#side-nav").find('.dropdown[data-target="#' + targetId + '"], .dropdown[data-bs-target="#' + targetId + '"]');
        $dropdown.addClass('collapsed').attr('aria-expanded', 'false');
    });
    
    

    $("html").on("error", "img", function() {
        $(this).hide();
    });

    // REMOVED: These initializations moved to core/app.js
    // enableExpandCollapseAll();
    // versions.init($(".ver-dropdown"), $(".ver-dropdown-container"));
    // masteries.init($(".mastery-dropdown"), $(".mastery-dropdown-container"));
    // configureImgSize();
    // adjustSidebarLayout();
    // $('.tt-dropdown-menu').width($('#content-header .header-tools').width());

    // Track Google Analytics as we navigate from one subpage / hash link to another.
    // Based on http://stackoverflow.com/a/4813223/25507
    // Really old browsers don't support hashchange.  A plugin is available, but I don't really care right now.
    $(window).on('hashchange', function() {
        _gaq.push(['_trackPageview', location.pathname + location.search + location.hash]);
        // Don't scroll here - let the route handlers call scrollToId after content loads
    });

    // Dark mode toggle functionality
    function initDarkMode() {
        // Check for saved theme preference or default to light mode
        const savedTheme = localStorage.getItem('theme');
        const systemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const initialTheme = savedTheme || (systemDark ? 'dark' : 'light');
        
        // Apply initial theme
        document.documentElement.setAttribute('data-theme', initialTheme);
        updateThemeToggleText(initialTheme);
        
        // Theme toggle click handler
        $('#theme-toggle').on('click', function(e) {
            e.preventDefault();
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateThemeToggleText(newTheme);
        });
        
        function updateThemeToggleText(theme) {
            const $toggle = $('#theme-toggle');
            if (theme === 'dark') {
                $toggle.text('☀️ Light mode');
            } else {
                $toggle.text('🌙 Dark mode');
            }
        }
    }
    
    // Function to refresh current navigation content
    function refreshCurrentNavigation() {
        var currentHash = window.location.hash;
        var $sideNav = $("#side-nav");
        var currentContent = $sideNav.html();
        
        // Only refresh if there's existing content
        if (currentContent) {
            var contentNav = '';
            
            // Extract the content navigation part (everything after mobile-main-nav div)
            if (currentContent.indexOf('mobile-main-nav') !== -1) {
                var mobileNavMatch = currentContent.match(/<div class="mobile-main-nav">.*?<\/div>(.*)/s);
                contentNav = mobileNavMatch ? mobileNavMatch[1] : currentContent;
            } else {
                // No mobile nav found, use all content as content nav
                contentNav = currentContent;
            }
            
            // Regenerate with current screen size logic
            $sideNav.html(createMobileNavigation(contentNav));
        }
    }
    
    // Mobile navigation functionality
    function initMobileNavigation() {
        // Mobile nav toggle
        $('.mobile-nav-toggle').on('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            toggleMobileNav();
        });
        
        // Close mobile nav when clicking overlay
        $('.mobile-nav-overlay').on('click', function() {
            closeMobileNav();
        });
        
        // Handle main navigation clicks in mobile menu
        $(document).on('click', '.mobile-main-nav a[data-nav]', function(e) {
            e.preventDefault();
            var navType = $(this).data('nav');
            var hash = $(this).attr('href');
            
            // Add active state to clicked button
            $('.mobile-main-nav a').removeClass('active');
            $(this).addClass('active');
            
            // Navigate to the section WITHOUT closing mobile nav
            window.location.hash = hash;
        });
        
        // Close mobile nav when clicking outside sidebar
        $(document).on('click', function(e) {
            if (window.innerWidth <= 767.98) {
                var $target = $(e.target);
                var isMenuOpen = $('#side-nav-container').hasClass('mobile-nav-open');
                var isClickInsideSidebar = $target.closest('#side-nav-container').length > 0;
                var isClickOnToggle = $target.closest('.mobile-nav-toggle').length > 0;
                
                if (isMenuOpen && !isClickInsideSidebar && !isClickOnToggle) {
                    closeMobileNav();
                }
            }
        });
        
        // Handle swipe gestures for mobile nav
        var startX = null;
        var startY = null;
        
        $(document).on('touchstart', function(e) {
            if (window.innerWidth <= 767.98) {
                var touch = e.originalEvent.touches[0];
                startX = touch.clientX;
                startY = touch.clientY;
            }
        });
        
        $(document).on('touchmove', function(e) {
            if (window.innerWidth <= 767.98 && startX !== null) {
                var touch = e.originalEvent.touches[0];
                var currentX = touch.clientX;
                var currentY = touch.clientY;
                var deltaX = currentX - startX;
                var deltaY = currentY - startY;
                
                // Detect horizontal swipe (more horizontal than vertical)
                if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
                    var isMenuOpen = $('#side-nav-container').hasClass('mobile-nav-open');
                    
                    // Swipe right to open (only if starting from left edge)
                    if (deltaX > 0 && !isMenuOpen && startX < 50) {
                        e.preventDefault();
                        openMobileNav();
                        startX = null;
                        startY = null;
                    }
                    // Swipe left to close (only if menu is open)
                    else if (deltaX < -50 && isMenuOpen) {
                        e.preventDefault();
                        closeMobileNav();
                        startX = null;
                        startY = null;
                    }
                }
            }
        });
        
        $(document).on('touchend', function() {
            startX = null;
            startY = null;
        });
        
        // Handle window resize with debounce
        var resizeTimeout;
        $(window).on('resize', function() {
            // Close mobile nav if window becomes desktop size
            if (window.innerWidth > 767.98) {
                closeMobileNav();
            }
            
            // Debounce the refresh to avoid excessive calls
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(function() {
                refreshCurrentNavigation();
            }, 150);
        });
        
        // Ensure mobile nav is closed on initial load if desktop size
        if (window.innerWidth > 767.98) {
            closeMobileNav();
        }
    }
    
    function toggleMobileNav() {
        var $sidebar = $('#side-nav-container');
        var $overlay = $('.mobile-nav-overlay');
        var $body = $('body');
        
        if ($sidebar.hasClass('mobile-nav-open')) {
            closeMobileNav();
        } else {
            openMobileNav();
        }
    }
    
    function openMobileNav() {
        var $sidebar = $('#side-nav-container');
        var $overlay = $('.mobile-nav-overlay');
        var $body = $('body');
        
        $sidebar.addClass('mobile-nav-open');
        $overlay.addClass('active');
        $body.addClass('mobile-nav-open');
        
        // Ensure focus accessibility
        $sidebar.attr('aria-hidden', 'false');
        $('.mobile-nav-toggle').attr('aria-expanded', 'true');
    }
    
    function closeMobileNav() {
        var $sidebar = $('#side-nav-container');
        var $overlay = $('.mobile-nav-overlay');
        var $body = $('body');
        
        $sidebar.removeClass('mobile-nav-open');
        $overlay.removeClass('active');
        $body.removeClass('mobile-nav-open');
        
        // Ensure focus accessibility
        $sidebar.attr('aria-hidden', 'true');
        $('.mobile-nav-toggle').attr('aria-expanded', 'false');
    }

    // Initialize dark mode
    initDarkMode();

    // Initialize mobile navigation
    initMobileNavigation();

    // We explicitly do NOT use var, for now, to facilitate inspection in Firebug.
    // (Our route handlers and such currently also rely on tome being global.)
    tome = {};

    // REMOVED: initializeRoutes() moved to core/app.js
    // initializeRoutes();
});
